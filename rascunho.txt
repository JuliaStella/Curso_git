A notações sobre o curso!

- Git rm <nome do arquivo>: Quando apagar o arquivo é preciso depois fazer o git push para subir as alterações e posteriomente
git status.

- Git log: histórico de alterações.

- Git mv:  renomera arquivos, depois da um git status -> git commit -> git push -> git pull 


Desfazendo alterações:

- Git checkout: Remove tudo de desenecessario, o que não se quer mas, voltando ao código original. CUIDADO!
  Deve se inserir um arquivo chamado (.gitgnore) na raiz do projeto.
  comandos git add . -> git commit -m "Adicionando git ignores" -> git push -> git status -> git commit = vai aparecer que não tem nada para enviar -> git push = a mesma coisa.

Desfazendo todas as alterações:

- Git reset: pode resetar as munças feitas, todas as alterações commitadas e também as pendentes serão excluidas. Pode ter o complemento ficando "Git reset --hard"
 

------------------- Modulo de branches-----------------------

O que é: uma forma de separar as versões dos projetos, sempre é criada uma branch chamada master ou main,
geralmente cada nova feature(seria códigos novos) de um projeto fica em branch separada, após a finalização da alterações
os branchs são unidos para ter o códifo-fonte final.


Primeiros passos:

- Git branch: vai olhar todas as branches exixtentes;

- Git branch <nome_da_branch>: criação de branch;

*Deletando branches*

- Podemos deletar um branch com a flag -d ou --delete;
- Geralmente se usa o delete quando o branch foi criado errado;

*Mudando de branch*

- Git checkout -b <Nome da branch>: cria e muda ao mesmo tempo de branch;
- Também é usado para dispensar mudanças de um arquivo;
- Alterando o branch podemos levar alterações que não foram commitadas junto, CUIDADO!!!  
  
   Em outras palavras as alterações feitas em determinada branch ficam nela ate que seja juntada com a principal.                     

*Unindo branches*

- Git merge <nome_da_branch>: pode juntar o código de dois branches distitos;
- Recebemos atualização de outros devs.

*Stash*

- Git stash: pode salva as modificações atuais PARA PROSSEGUIR COM UMA OUTRA ABORDAGEM DE SOLUÇÃO e não perder o 
código;
- Após o comando o branch será resetado para a sua versão de acordo com o repo
  
Recuperando stash

- Pode verificar as stash list;
- Pode recuperar a stash com o comando git stash <nome>;
- Git stash applay <número_da_stash>: é o comando que recupera as stashs;
- Git stash show -p <número_da_stash>: mostra as interações de cada stash;
  Desta maneira podemos continuar de onde paramos com os arquivos adicionados a stash.

Removendo a stash

- Git stash clear: limpa totalmente as stash de um branch;
- Git stash drop <nome>: caso seja necessário deletar uma stash específica;

*Criando tags*

- Git tag -a <nome> -m "<mensagem>": pode criar tags nos branches;
  OBS: depois desse comando é preciso da um commit!!!
- A tag é diferente do stash, serve como um git checkpoint de um branch;
  Usado para demarcar estágios do desenvolvimento de algmu recurso;
  
  *Verificando e alterando tags*

  - Git show <nome>: pode verificar;
  - Git checkout: colocar o nome da tag para navegar entre as mesmas;
    Desta maneira podemos retroceder ou avançar em checkpoints de um branch.

*Enviando e compartilhando tags*

- As tags podem ser enviadas para o repositório de código, sendo compartilhada entre os devs;
- Git push origin <nome>: nome é nome da tag;
- Git push origin --tags: enviar mas de uma tag;


------------------- Compartilhando e atualizando-----------------------

*Encontrando branches*

- Branches novos são criados a todo tempo e o sue git pode não estar mapeado eles;
- Git fetch: atualiza de todos os branchs e tags que ainda não estão reconhecidos po você;
  Este comando é útil para utilixar o branch de outro dev do time.


*Recebendo alterações*

- Git pull: serve para receber atualizações do repositório remoto;
- Cada branchpode ser atualizado com o git pull;
  ultilizamos para atualizar a master do repo como também quando
  trabalhamos em conjunto e querems receber as atualizações de um dev.

*Enviando alterações*

- Git push: envia alterações, como também, de uma única branch específica;

*Utilizando o remote*

- Git remote:faz algumas ações com: adicionar um repo para trackear ou remover;
- Quando criamos um repo remoto, adicionamos ele ao git com Git remote add origin <link>, 
  para apagar Git remote rm origin;

  *Trabalhando com submódulos*

  - Submódulo é a maneira que temos de possuir dois ou mais projetos em um só repositório;
  - Podemos adicionar uma dependência ao nosso projeto atual, porém mantendo suas estruturas separadas;
  - Git submdule add <repo>: para adicionas o submódulo;
  - Git submodule: para verificar os submódulos; 

*Atualizando submódulo*

- Commitar as mudanças;
- Git push --recurse-submodules=on-demand: enviar para o repo do submódulo;
  Este fluxo fará a atualização apenas do submódulo;

------------------- Exibindo informações-----------------------

- Git show: ele sá as informações do branch atual e também seus commmits;
  AS modificações de arquivos entre cada coomit também são exibidas;
- GIt show <tag>: pode exibir as informações de tags;

*Exibindo diferenças*

- Git diff: serve para exibir as diferenças de um branch;
  Qando utlizamos as diferenças do branch atual com o remoto serão exibidas 
  no terminal;
- Git diff <arquivo> <arquivo_b>: pode também verificara diferença entrearquivos;

*Log resumido*

- Git shortlog: nos da um log resumido do progeto;
  Cada commit será unido por nome do autor.
  Pode então saber quais commits foram enviados as projetos e por
  quem; 

  ------------------- Administração do repositório-----------------------

  *Limpando arquivos untracked*

- Git clean: vai verificar e limpar arquivos não estão sendo trakeados;
    Ou seja todos que você não utilizou git add.
    Utilizado para arquivos que são gerados automaticamente, por exemplo, e atrapalham a visualização
    do que é realmente importante; 

*otimizado o repositório*

- Git gc: abreviação de git garbage collector, ele identifica arquivos que não são mais necessáris e os 
exclui;
   Isso fará com que o repositórioseja otimizado em questções de perfomance;

*Chegando integridade de arquivos*

- Git fsck: abreviação de File System ChecK;
  Verifica a integridade de arquivos e sua conectividade;
  Verificando assim possíveis corrupções em arquivos;
  Comando de rotina, utilizado para ver se está  tudo certo com nossos arquivos;

*Reflog*

- Git reflog: vai mapear todos os seus passos no repositório, até uma mudança
de branch é inserida neste log;
   OS reflogd ficam salvos até expirar, o tempo de expiração padrão é de 30 dias;

*Transformando o repo para arquivo*

- Git archive: pode transformar o repo um arquivo compactafo, por exemplo;
- Git archive --format zip --output master_files.zip main: e então a master vai 
esta zipada no arquivomaste_files.zip;

------------------- importância do commit-----------------------

- O problema: commits sem sentido atrapalham o projeto;
- Precisa padronizar os commits, para que o projeto cresça de forma saudável
 também no versionamento, isso ajuda em: reviw do Pull Request, melhoria dos log em 
 Git log, manutenção do projero(voltar códig, por exemplo);

 *Branches com commits ruins*

 - Existe uma solução chamada privarte branches;
 - onde criamos branchesque não serão comopartilhados no repositório, então podemos colocar qualquer commit;
 - Ao fim da soluçãodo problema podemos fazer um rabes;
 - Git rebase <atual> <funcionalidade> -i;
 - Escolhemos os branches para excluir (squash) e renoemar com (reword);

*Boas mensagems de commit*

- separar assunto do corpo da mensagem;
- Assunto dom no maxímo 50 caracteres;
- Assunto com letra inicial maiúscula;
- Corpo com no máximo 72 caracteres;
- Explicar o porque e como do commit, e não como código foi escrito;

------------------- Explorando e entendo o GitHub-----------------------

*Criando repositório*

- No GitHub iniciamos os repositórios, e temos algumas informações importantes para preeencher,
vamos vê-las em detalhes;
- Algumas delas são: nome do repo, descrição, licença;
- Tudo poderá ser alterando ao logo do seu projeto, mas é interessane conhecer os detallhes das informações para
configurar um projeto;

OBS: quando se da o git push -u origin main: o -u serve para levar novas 
alterações sobre branches e outros fatores que não serião levados;

*A aba code*

- Na aba Code teremos acesso a informações importantes, como o próprio código fonte;
- Podemos checar também uma documentação do projeto pelo README.md;
- Criar branches, adicionar arquivos e muito mais!;

*A aba issue*

- Na aba issue podemos criar tarefas ou possíveis bugs do projeto;
- Interessante para otimização se manter ciente o que ainda precisa fazer ou corrigirç
- Normalmente há um pradão para criação de novos issues;
- Podemos utilizar o Markdown no texto também (igual  README.md);
- A issue deve ter uma label e também um responsável;

*A aba pull request*

- Na aba pull resquest é onde os colaboradores do projeto enviam código
para resolver as issues ou adicionar novas funcionalidades ao projeto;
- A ideia é que o código não seja inserido direto na master e sim passe por
um pull request, para ser analisado;
-O pull request vem de um novo branch criado no projeto e enviado para o 
repo,com o incremento do código.

*A aba actions*

- Na aba actions é onde se cria as autoriizações do deploy com integração em outors serviçosç
- Incluindo CI/CD (Continuous integration/Continuous development);
- Ou seja, podemos criar uma rotina de atualizar a master automaticamente
e outros processos;

*A aba projects*

- Na aba projects podemos criar um  projeto e utilizar um quadro de tarefas;
- Este processo é conhecido como Kanban e pode ajudar a organizar seu time, criando
 notas que podem virar issues;
- Estrutura interessantes: backlog, retorno de qualidade, desenvolvimento, teste, finalizadas;
- A tela lembra muito o software Trello;

*A aba wiki*

- Na aba wiki podemos criar uma documentação masi extensa para o projeto;
- Como descrever funcionalidades, bugs conhecidos e não solucionados, entre outras funções;
- A ideia é que seja um repositório de conhecimento sobre o projeto;

*A aba insights*

- Na aba insights temos informações detalhaas do projeto, como:
  > Quem são os contribuidores, commits, fprhs e muito mais;
  > Interessantepara entender como o projeto está andando e sia evolução desde o início;

*A aba settings*

- Na aba senttings temos aceeso a diversas configurações do projeto;
- É onde podemos alterar nome do repo ou remover/adicionar features;
- E também é nela que adicionamos colaboradores ao projeto;
- Repositório poder removido nesta aba;

*Criando um gist*

- Gist são pequenos blocos de código que podem ser hospedados no GitHub também;
- vocêpode armazenar uma solução que achou interressante para algum problema e 
nçao quer perder, por exemplo;
- E o link do gist pode ser compartilhado;
- No fim das contas o gist acaba sendo um repositório também;

*Encontrando repositório*

- O GitHub não serve só para salvar os projetos, podemos encontrar muitos repos interessantes;
- Podemos até aprender como isso também, olhando o código fonte de desenvolvedores experientes;
- E não para por aí: vcê pode dar star nos projetos que godtou ou fork nos que deseja continuar
em um repo próprio;

------------------- Markdown do básico ao avançado-----------------------

*O que é Markdown?*

- O Markdown é uma forma de adicionar estilo a textos na web;
- O arquivo README.md aceita Markdownç
- Você vai conseguir exibir: trechos de código, links, imagens e muito mais;
- Dando uma melhor experiência para o usuário nas suas documentações;

*Cabeçalhos*

- Os Cabeçalhos em Markdown são determinados pelo símbolo #;
- Cabeçalhos são os famosos títulos ou headings do HTML;
- # => h1, ## => h2, ### => h3 e assim por diante;