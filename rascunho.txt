A notações sobre o curso!

- Git rm <nome do arquivo>: Quando apagar o arquivo é preciso depois fazer o git push para subir as alterações e posteriomente
git status.

- Git log: histórico de alterações.

- Git mv:  renomera arquivos, depois da um git status -> git commit -> git push -> git pull 


Desfazendo alterações:

- Git checkout: Remove tudo de desenecessario, o que não se quer mas, voltando ao código original. CUIDADO!
  Deve se inserir um arquivo chamado (.gitgnore) na raiz do projeto.
  comandos git add . -> git commit -m "Adicionando git ignores" -> git push -> git status -> git commit = vai aparecer que não tem nada para enviar -> git push = a mesma coisa.

Desfazendo todas as alterações:

- Git reset: pode resetar as munças feitas, todas as alterações commitadas e também as pendentes serão excluidas. Pode ter o complemento ficando "Git reset --hard"
 

------------------- Modulo de branches-----------------------

O que é: uma forma de separar as versões dos projetos, sempre é criada uma branch chamada master ou main,
geralmente cada nova feature(seria códigos novos) de um projeto fica em branch separada, após a finalização da alterações
os branchs são unidos para ter o códifo-fonte final.


Primeiros passos:

- Git branch: vai olhar todas as branches exixtentes;

- Git branch <nome_da_branch>: criação de branch;

*Deletando branches*

- Podemos deletar um branch com a flag -d ou --delete;
- Geralmente se usa o delete quando o branch foi criado errado;

*Mudando de branch*

- Git checkout -b <Nome da branch>: cria e muda ao mesmo tempo de branch;
- Também é usado para dispensar mudanças de um arquivo;
- Alterando o branch podemos levar alterações que não foram commitadas junto, CUIDADO!!!  
  
   Em outras palavras as alterações feitas em determinada branch ficam nela ate que seja juntada com a principal.                     

*Unindo branches*

- Git merge <nome_da_branch>: pode juntar o código de dois branches distitos;
- Recebemos atualização de outros devs.

*Stash*

- Git stash: pode salva as modificações atuais PARA PROSSEGUIR COM UMA OUTRA ABORDAGEM DE SOLUÇÃO e não perder o 
código;
- Após o comando o branch será resetado para a sua versão de acordo com o repo
  
Recuperando stash

- Pode verificar as stash list;
- Pode recuperar a stash com o comando git stash <nome>;
- Git stash applay <número_da_stash>: é o comando que recupera as stashs;
- Git stash show -p <número_da_stash>: mostra as interações de cada stash;
  Desta maneira podemos continuar de onde paramos com os arquivos adicionados a stash.

Removendo a stash

- Git stash clear: limpa totalmente as stash de um branch;
- Git stash drop <nome>: caso seja necessário deletar uma stash específica;

*Criando tags*

- Git tag -a <nome> -m "<mensagem>": pode criar tags nos branches;
  OBS: depois desse comando é preciso da um commit!!!
- A tag é diferente do stash, serve como um git checkpoint de um branch;
  Usado para demarcar estágios do desenvolvimento de algmu recurso;
  
  *Verificando e alterando tags*

  - Git show <nome>: pode verificar;
  - Git checkout: colocar o nome da tag para navegar entre as mesmas;
    Desta maneira podemos retroceder ou avançar em checkpoints de um branch.

*Enviando e compartilhando tags*

- As tags podem ser enviadas para o repositório de código, sendo compartilhada entre os devs;
- Git push origin <nome>: nome é nome da tag;
- Git push origin --tags: enviar mas de uma tag;


------------------- Compartilhando e atualizando-----------------------

*Encontrando branches*

- Branches novos são criados a todo tempo e o sue git pode não estar mapeado eles;
- Git fetch: atualiza de todos os branchs e tags que ainda não estão reconhecidos po você;
  Este comando é útil para utilixar o branch de outro dev do time.


*Recebendo alterações*

- Git pull: serve para receber atualizações do repositório remoto;
- Cada branchpode ser atualizado com o git pull;
  ultilizamos para atualizar a master do repo como também quando
  trabalhamos em conjunto e querems receber as atualizações de um dev.

*Enviando alterações*

- Git push: envia alterações, como também, de uma única branch específica;

*Utilizando o remote*

- Git remote:faz algumas ações com: adicionar um repo para trackear ou remover;
- Quando criamos um repo remoto, adicionamos ele ao git com Git remote add origin <link>, 
  para apagar Git remote rm origin;

  *Trabalhando com submódulos*

  - Submódulo é a maneira que temos de possuir dois ou mais projetos em um só repositório;
  - Podemos adicionar uma dependência ao nosso projeto atual, porém mantendo suas estruturas separadas;
  - Git submdule add <repo>: para adicionas o submódulo;
  - Git submodule: para verificar os submódulos; 

*Atualizando submódulo*

- Commitar as mudanças;
- Git push --recurse-submodules=on-demand: enviar para o repo do submódulo;
  Este fluxo fará a atualização apenas do submódulo;

------------------- Exibindo informações-----------------------

- Git show: ele sá as informações do branch atual e também seus commmits;
  AS modificações de arquivos entre cada coomit também são exibidas;
- GIt show <tag>: pode exibir as informações de tags;

*Exibindo diferenças*

- Git diff: serve para exibir as diferenças de um branch;
  Qando utlizamos as diferenças do branch atual com o remoto serão exibidas 
  no terminal;
- Git diff <arquivo> <arquivo_b>: pode também verificara diferença entrearquivos;

*Log resumido*

- Git shortlog: nos da um log resumido do progeto;
  Cada commit será unido por nome do autor.
  Pode então saber quais commits foram enviados as projetos e por
  quem; 

  ------------------- Administração do repositório-----------------------

  *Limpando arquivos untracked*

  - Git clean: vai verificar e limpar arquivos não estão sendo trakeados;
    Ou seja todos que você não utilizou git add.
    Utilizado para arquivos que são gerados automaticamente, por exemplo, e atrapalham a visualização
    do que é realmente importante; 